
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  altContact: 'altContact',
  profilePicture: 'profilePicture',
  role: 'role',
  status: 'status',
  resetRequired: 'resetRequired',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleteAt: 'deleteAt',
  deletionType: 'deletionType',
  deletionReason: 'deletionReason',
  deletionRequestedBy: 'deletionRequestedBy',
  createdById: 'createdById'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  registrationNo: 'registrationNo',
  companySector: 'companySector',
  companySize: 'companySize',
  website: 'website',
  address: 'address',
  city: 'city',
  country: 'country',
  postalCode: 'postalCode',
  designation: 'designation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgencyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agencyName: 'agencyName',
  registrationNo: 'registrationNo',
  licenseNumber: 'licenseNumber',
  licenseExpiry: 'licenseExpiry',
  country: 'country',
  website: 'website',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  department: 'department',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequirementScalarFieldEnum = {
  id: 'id',
  specialNotes: 'specialNotes',
  status: 'status',
  languages: 'languages',
  minExperience: 'minExperience',
  maxAge: 'maxAge',
  ticketType: 'ticketType',
  ticketProvided: 'ticketProvided',
  clientId: 'clientId',
  assignedAgencyId: 'assignedAgencyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt'
};

exports.Prisma.JobRoleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  quantity: 'quantity',
  nationality: 'nationality',
  salary: 'salary',
  salaryCurrency: 'salaryCurrency',
  startDate: 'startDate',
  contractDuration: 'contractDuration',
  requirementId: 'requirementId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequirementAssignmentScalarFieldEnum = {
  id: 'id',
  requirementId: 'requirementId',
  jobRoleId: 'jobRoleId',
  agencyId: 'agencyId',
  quantity: 'quantity',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabourProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  age: 'age',
  gender: 'gender',
  nationality: 'nationality',
  jobRoleName: 'jobRoleName',
  status: 'status',
  email: 'email',
  phone: 'phone',
  passportNumber: 'passportNumber',
  passportExpiry: 'passportExpiry',
  passportCopy: 'passportCopy',
  passportVerified: 'passportVerified',
  visaType: 'visaType',
  visaExpiry: 'visaExpiry',
  visaCopy: 'visaCopy',
  visaVerified: 'visaVerified',
  medicalReport: 'medicalReport',
  medicalExpiry: 'medicalExpiry',
  medicalVerified: 'medicalVerified',
  policeClearance: 'policeClearance',
  policeVerified: 'policeVerified',
  contractCopy: 'contractCopy',
  contractVerified: 'contractVerified',
  otherDocs: 'otherDocs',
  verificationStatus: 'verificationStatus',
  statusReason: 'statusReason',
  agencyId: 'agencyId',
  requirementAssignmentId: 'requirementAssignmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  documentsSubmittedAt: 'documentsSubmittedAt',
  documentsVerifiedAt: 'documentsVerifiedAt'
};

exports.Prisma.DocumentVerificationScalarFieldEnum = {
  id: 'id',
  documentType: 'documentType',
  documentUrl: 'documentUrl',
  status: 'status',
  comments: 'comments',
  labourProfileId: 'labourProfileId',
  verifiedById: 'verifiedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  verifiedAt: 'verifiedAt'
};

exports.Prisma.ProcedureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  dueDate: 'dueDate',
  completedDate: 'completedDate',
  comments: 'comments',
  metadata: 'metadata',
  requirementId: 'requirementId',
  labourProfileId: 'labourProfileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabourStatusLogScalarFieldEnum = {
  id: 'id',
  status: 'status',
  comments: 'comments',
  metadata: 'metadata',
  labourProfileId: 'labourProfileId',
  changedById: 'changedById',
  createdAt: 'createdAt'
};

exports.Prisma.ClientDocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  url: 'url',
  name: 'name',
  description: 'description',
  verified: 'verified',
  comments: 'comments',
  expiryDate: 'expiryDate',
  clientId: 'clientId',
  verifiedById: 'verifiedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgencyDocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  url: 'url',
  name: 'name',
  description: 'description',
  verified: 'verified',
  comments: 'comments',
  expiryDate: 'expiryDate',
  agencyId: 'agencyId',
  verifiedById: 'verifiedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  description: 'description',
  oldData: 'oldData',
  newData: 'newData',
  affectedFields: 'affectedFields',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  performedById: 'performedById',
  performedAt: 'performedAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  read: 'read',
  actionUrl: 'actionUrl',
  metadata: 'metadata',
  recipientId: 'recipientId',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  RECRUITMENT_ADMIN: 'RECRUITMENT_ADMIN',
  CLIENT_ADMIN: 'CLIENT_ADMIN',
  RECRUITMENT_AGENCY: 'RECRUITMENT_AGENCY'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  PENDING_REVIEW: 'PENDING_REVIEW',
  SUBMITTED: 'SUBMITTED',
  PENDING_SUBMISSION: 'PENDING_SUBMISSION',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED',
  NOT_VERIFIED: 'NOT_VERIFIED',
  SUSPENDED: 'SUSPENDED'
};

exports.DeletionType = exports.$Enums.DeletionType = {
  SCHEDULED: 'SCHEDULED',
  IMMEDIATE: 'IMMEDIATE'
};

exports.CompanySector = exports.$Enums.CompanySector = {
  IT: 'IT',
  REAL_ESTATE: 'REAL_ESTATE',
  HEALTHCARE: 'HEALTHCARE',
  FINANCE: 'FINANCE',
  MANUFACTURING: 'MANUFACTURING',
  RETAIL: 'RETAIL',
  CONSTRUCTION: 'CONSTRUCTION',
  EDUCATION: 'EDUCATION',
  HOSPITALITY: 'HOSPITALITY',
  OIL_GAS: 'OIL_GAS',
  TRANSPORTATION: 'TRANSPORTATION',
  OTHER: 'OTHER'
};

exports.CompanySize = exports.$Enums.CompanySize = {
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE',
  ENTERPRISE: 'ENTERPRISE'
};

exports.RequirementStatus = exports.$Enums.RequirementStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  FULFILLED: 'FULFILLED',
  CLOSED: 'CLOSED'
};

exports.ExperienceLevel = exports.$Enums.ExperienceLevel = {
  FRESH: 'FRESH',
  ONE_YEAR: 'ONE_YEAR',
  TWO_YEARS: 'TWO_YEARS',
  THREE_YEARS: 'THREE_YEARS',
  FOUR_YEARS: 'FOUR_YEARS',
  FIVE_PLUS_YEARS: 'FIVE_PLUS_YEARS'
};

exports.TicketType = exports.$Enums.TicketType = {
  ONE_WAY: 'ONE_WAY',
  TWO_WAY: 'TWO_WAY',
  NONE: 'NONE'
};

exports.ContractDuration = exports.$Enums.ContractDuration = {
  ONE_YEAR: 'ONE_YEAR',
  TWO_YEARS: 'TWO_YEARS',
  THREE_YEARS: 'THREE_YEARS',
  UNLIMITED: 'UNLIMITED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.LabourProfileStatus = exports.$Enums.LabourProfileStatus = {
  RECEIVED: 'RECEIVED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SHORTLISTED: 'SHORTLISTED',
  DEPLOYED: 'DEPLOYED',
  QVC_PROCESS: 'QVC_PROCESS',
  MEDICAL_PROCESS: 'MEDICAL_PROCESS',
  VISA_PROCESS: 'VISA_PROCESS',
  READY_FOR_DEPLOYMENT: 'READY_FOR_DEPLOYMENT'
};

exports.DocumentVerificationStatus = exports.$Enums.DocumentVerificationStatus = {
  PENDING: 'PENDING',
  PARTIALLY_VERIFIED: 'PARTIALLY_VERIFIED',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.ProcedureStatus = exports.$Enums.ProcedureStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  LICENSE: 'LICENSE',
  INSURANCE: 'INSURANCE',
  ID_PROOF: 'ID_PROOF',
  ADDRESS_PROOF: 'ADDRESS_PROOF',
  COMPANY_REGISTRATION: 'COMPANY_REGISTRATION',
  PASSPORT: 'PASSPORT',
  CV: 'CV',
  OTHER: 'OTHER'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  USER_CREATED: 'USER_CREATED',
  USER_UPDATED: 'USER_UPDATED',
  USER_DELETED: 'USER_DELETED',
  USER_STATUS_CHANGED: 'USER_STATUS_CHANGED',
  USER_PASSWORD_RESET: 'USER_PASSWORD_RESET',
  CLIENT_CREATED: 'CLIENT_CREATED',
  CLIENT_UPDATED: 'CLIENT_UPDATED',
  CLIENT_VERIFIED: 'CLIENT_VERIFIED',
  CLIENT_REJECTED: 'CLIENT_REJECTED',
  AGENCY_CREATED: 'AGENCY_CREATED',
  AGENCY_UPDATED: 'AGENCY_UPDATED',
  AGENCY_VERIFIED: 'AGENCY_VERIFIED',
  AGENCY_REJECTED: 'AGENCY_REJECTED',
  AGENCY_DELETION_REQUESTED: 'AGENCY_DELETION_REQUESTED',
  REQUIREMENT_CREATED: 'REQUIREMENT_CREATED',
  REQUIREMENT_UPDATED: 'REQUIREMENT_UPDATED',
  REQUIREMENT_DELETE: 'REQUIREMENT_DELETE',
  REQUIREMENT_REJECTED: 'REQUIREMENT_REJECTED',
  REQUIREMENT_STATUS_CHANGED: 'REQUIREMENT_STATUS_CHANGED',
  REQUIREMENT_ASSIGNED: 'REQUIREMENT_ASSIGNED',
  DRAFT_CREATED: 'DRAFT_CREATED',
  DRAFT_UPDATED: 'DRAFT_UPDATED',
  LABOUR_PROFILE_CREATED: 'LABOUR_PROFILE_CREATED',
  LABOUR_PROFILE_UPDATED: 'LABOUR_PROFILE_UPDATED',
  LABOUR_STATUS_CHANGED: 'LABOUR_STATUS_CHANGED',
  DOCUMENT_UPLOADED: 'DOCUMENT_UPLOADED',
  DOCUMENT_VERIFIED: 'DOCUMENT_VERIFIED',
  DOCUMENT_REJECTED: 'DOCUMENT_REJECTED',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  ACCOUNT_RECOVERY: 'ACCOUNT_RECOVERY'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  SYSTEM: 'SYSTEM',
  REQUIREMENT: 'REQUIREMENT',
  LABOUR: 'LABOUR',
  DOCUMENT: 'DOCUMENT',
  ACCOUNT: 'ACCOUNT',
  GENERAL: 'GENERAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Client: 'Client',
  Agency: 'Agency',
  Admin: 'Admin',
  Requirement: 'Requirement',
  JobRole: 'JobRole',
  RequirementAssignment: 'RequirementAssignment',
  LabourProfile: 'LabourProfile',
  DocumentVerification: 'DocumentVerification',
  Procedure: 'Procedure',
  LabourStatusLog: 'LabourStatusLog',
  ClientDocument: 'ClientDocument',
  AgencyDocument: 'AgencyDocument',
  AuditLog: 'AuditLog',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
