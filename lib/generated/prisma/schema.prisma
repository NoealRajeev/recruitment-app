generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========
enum UserRole {
  RECRUITMENT_ADMIN
  CLIENT_ADMIN
  RECRUITMENT_AGENCY
}

enum AccountStatus {
  SUBMITTED
  VERIFIED
  REJECTED
  NOT_VERIFIED
  SUSPENDED
}

enum DocumentType {
  PROFILE_IMAGE
  LICENSE
  INSURANCE
  ID_PROOF
  ADDRESS_PROOF
  COMPANY_REGISTRATION
  PASSPORT
  CV
  OTHER
}

enum DocumentCategory {
  IMPORTANT
  SUPPORTING
}

enum CompanySector {
  IT
  REAL_ESTATE
  HEALTHCARE
  FINANCE
  MANUFACTURING
  RETAIL
  CONSTRUCTION
  EDUCATION
  HOSPITALITY
  OIL_GAS
  TRANSPORTATION
  OTHER
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum AuditAction {
  // User
  USER_CREATE
  USER_READ
  USER_UPDATE
  USER_DELETE

  // Client
  CLIENT_CREATE
  CLIENT_READ
  CLIENT_UPDATE
  CLIENT_DELETE

  // Agency
  AGENCY_CREATE
  AGENCY_READ
  AGENCY_UPDATE
  AGENCY_DELETE

  // Requirement
  REQUIREMENT_CREATE
  REQUIREMENT_READ
  REQUIREMENT_UPDATE
  REQUIREMENT_DELETE

  // Labour Profile
  LABOUR_PROFILE_CREATE
  LABOUR_PROFILE_READ
  LABOUR_PROFILE_UPDATE
  LABOUR_PROFILE_DELETE
  LABOUR_PROFILE_DOCUMENT_UPLOAD
  LABOUR_PROFILE_STATUS_CHANGE
  LABOUR_PROFILE_VERIFICATION_CHANGE

  // Document
  DOCUMENT_CREATE
  DOCUMENT_READ
  DOCUMENT_UPDATE
  DOCUMENT_DELETE

  // OTP
  OTP_CREATE
  OTP_READ
  OTP_UPDATE
  OTP_DELETE

  // Notification
  NOTIFICATION_CREATE
  NOTIFICATION_READ
  NOTIFICATION_UPDATE
  NOTIFICATION_DELETE

  // System / Misc
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  ACCOUNT_RECOVERY
}

enum NotificationType {
  // User Management
  USER_REGISTERED
  USER_VERIFIED
  USER_SUSPENDED
  USER_DELETED
  PASSWORD_CHANGED
  ACCOUNT_RECOVERY

  // Requirement Management
  REQUIREMENT_CREATED
  REQUIREMENT_UPDATED
  REQUIREMENT_STATUS_CHANGED
  REQUIREMENT_FORWARDED_TO_AGENCY
  REQUIREMENT_ACCEPTED
  REQUIREMENT_REJECTED
  REQUIREMENT_NEEDS_REVISION

  // Labour Profile Management
  LABOUR_PROFILE_CREATED
  LABOUR_PROFILE_STATUS_CHANGED
  LABOUR_PROFILE_VERIFIED
  LABOUR_PROFILE_DOCUMENT_UPLOADED
  LABOUR_PROFILE_STAGE_UPDATED

  // Assignment Management
  ASSIGNMENT_CREATED
  ASSIGNMENT_STATUS_CHANGED
  ASSIGNMENT_FEEDBACK_RECEIVED

  // Document Management
  DOCUMENT_UPLOADED
  DOCUMENT_VERIFIED
  DOCUMENT_REJECTED
  OFFER_LETTER_GENERATED
  OFFER_LETTER_SIGNED
  VISA_UPLOADED
  TRAVEL_DOCUMENTS_UPLOADED

  // Stage Management
  STAGE_COMPLETED
  STAGE_FAILED
  STAGE_PENDING_ACTION
  TRAVEL_CONFIRMED
  ARRIVAL_CONFIRMED
  LABOUR_DEPLOYED

  // Agency Management
  AGENCY_ASSIGNED
  AGENCY_RESPONSE_RECEIVED
  AGENCY_STATUS_CHANGED

  // System Notifications
  SYSTEM_MAINTENANCE
  SYSTEM_UPDATE
  SECURITY_ALERT
  WELCOME_MESSAGE
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  REJECTED
  PAID
  SIGNED
  REFUSED
  FIT
  UNFIT
  PASSED
  FILLED
  TRAVELED
  RESCHEDULED
  CANCELED
  ARRIVED
  NOT_ARRIVED
  VISA_PRINTED
}

enum LabourStage {
  OFFER_LETTER_SIGN
  VISA_APPLYING
  QVC_PAYMENT
  CONTRACT_SIGN
  MEDICAL_STATUS
  FINGERPRINT
  VISA_PRINTING
  READY_TO_TRAVEL
  TRAVEL_CONFIRMATION
  ARRIVAL_CONFIRMATION
  DEPLOYED
}

enum DeletionType {
  SCHEDULED
  IMMEDIATE
}

enum RequirementStatus {
  DRAFT
  SUBMITTED
  PARTIALLY_SUBMITTED
  PENDING
  UNDER_REVIEW
  FORWARDED
  ACCEPTED
  PARTIALLY_ACCEPTED
  REJECTED
  COMPLETED
  CLIENT_REVIEW
  SUBMITTED_TO_CLIENT
  NEEDS_REVISION
  AGENCY_REJECTED
}

enum ContractDuration {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  ONE_YEAR
  TWO_YEARS
  THREE_YEARS
  FIVE_PLUS_YEARS
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum LabourProfileStatus {
  RECEIVED
  UNDER_REVIEW
  APPROVED
  REJECTED
  SHORTLISTED
  DEPLOYED
}

enum DocumentVerificationStatus {
  PENDING
  PARTIALLY_VERIFIED
  VERIFIED
  REJECTED
}

// ========== MODELS ==========
model User {
  id                  String        @id @default(uuid())
  name                String
  email               String        @unique @db.VarChar(255)
  password            String
  tempPassword        String?       @db.VarChar(255)
  phone               String?       @unique @db.VarChar(20)
  altContact          String?       @db.VarChar(20)
  profilePicture      String?
  role                UserRole
  status              AccountStatus @default(NOT_VERIFIED)
  resetRequired       Boolean       @default(true)
  lastLogin           DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  deleteAt            DateTime?
  deletionType        DeletionType?
  deletionReason      String?
  deletionRequestedBy String?
  clientProfile       Client?
  agencyProfile       Agency?
  adminProfile        Admin?
  createdBy           User?         @relation("UserCreation", fields: [createdById], references: [id])
  createdById         String?
  createdUsers        User[]        @relation("UserCreation")
  auditLogs           AuditLog[]

  // Notification relations
  notifications     Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("UserSentNotifications")
  Document          Document[]

  @@index([email])
  @@index([status])
  @@index([role])
  @@index([createdAt])
  @@index([email, status])
}

model Client {
  id             String        @id @default(uuid())
  userId         String        @unique
  user           User          @relation(fields: [userId], references: [id])
  companyName    String        @db.VarChar(255)
  registrationNo String?       @unique @db.VarChar(50)
  companySector  CompanySector
  companySize    CompanySize
  website        String?       @db.VarChar(255)
  address        String
  city           String        @db.VarChar(100)
  country        String        @db.VarChar(100)
  postalCode     String?       @db.VarChar(20)
  designation    String        @db.VarChar(100)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Requirement    Requirement[]

  @@index([companyName])
  @@index([registrationNo])
  @@index([companySector])
  @@map("clients")
}

model Agency {
  id                 String              @id @default(uuid())
  userId             String              @unique
  user               User                @relation(fields: [userId], references: [id])
  agencyName         String              @db.VarChar(255)
  registrationNo     String?             @unique @db.VarChar(50)
  licenseNumber      String              @db.VarChar(50)
  licenseExpiry      DateTime
  country            String              @db.VarChar(100)
  website            String?             @db.VarChar(255)
  address            String
  city               String              @db.VarChar(100)
  postalCode         String?             @db.VarChar(20)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  JobRole            JobRole[]
  LabourProfile      LabourProfile[]
  LabourAssignment   LabourAssignment[]
  jobRoleForwardings JobRoleForwarding[]

  @@index([agencyName])
  @@index([licenseNumber])
  @@index([registrationNo])
}

model Admin {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  name        String   @db.VarChar(255)
  department  String?  @db.VarChar(100)
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admins")
}

model Document {
  id      String       @id @default(uuid())
  ownerId String
  owner   User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  type    DocumentType
  url     String

  labourProfileId String?
  labourProfile   LabourProfile? @relation(fields: [labourProfileId], references: [id], onDelete: SetNull)

  status        AccountStatus
  category      DocumentCategory     @default(SUPPORTING)
  requirementId String?
  requirement   DocumentRequirement? @relation(fields: [requirementId], references: [id], onDelete: SetNull)
  uploadedAt    DateTime             @default(now())

  @@index([labourProfileId])
  @@index([ownerId])
  @@index([type])
  @@index([status])
  @@index([ownerId, type])
  @@index([requirementId, status])
}

model DocumentRequirement {
  id           String           @id @default(uuid())
  role         UserRole
  documentType DocumentType
  category     DocumentCategory @default(IMPORTANT)
  createdAt    DateTime         @default(now())
  documents    Document[]

  @@unique([role, documentType])
}

model Requirement {
  id        String            @id @default(uuid())
  clientId  String
  client    Client            @relation(fields: [clientId], references: [id])
  status    RequirementStatus @default(SUBMITTED)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  /// one requirement can have many job roles
  jobRoles JobRole[]

  /// history / audit
  auditLogs AuditLog[] @relation("RequirementAudit")

  LabourProfile      LabourProfile[]
  OfferLetterDetails OfferLetterDetails?
}

/// A single row in the "table" of roles for one requirement
model JobRole {
  id            String      @id @default(uuid())
  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id])

  title            String
  quantity         Int
  nationality      String
  startDate        DateTime
  contractDuration ContractDuration?

  salaryCurrency                  String? @default("QAR")
  basicSalary                     Float
  foodAllowance                   Float?
  foodProvidedByCompany           Boolean @default(false)
  housingAllowance                Float?
  housingProvidedByCompany        Boolean @default(false)
  transportationAllowance         Float?
  transportationProvidedByCompany Boolean @default(false)
  healthInsurance                 String
  mobileAllowance                 Float?
  mobileProvidedByCompany         Boolean @default(false)
  natureOfWorkAllowance           Float?
  otherAllowance                  Float?

  ticketFrequency      String
  workLocations        String
  previousExperience   String
  totalExperienceYears Int?
  preferredAge         Int?

  languageRequirements String[] // per-role languages
  specialRequirements  String? // per-role notes

  /// Which agency (if any) this role has been forwarded to
  assignedAgencyId String?
  assignedAgency   Agency?           @relation(fields: [assignedAgencyId], references: [id])
  /// If forwarded, track agency's response status
  agencyStatus     RequirementStatus @default(UNDER_REVIEW)
  adminStatus      RequirementStatus @default(PENDING)

  LabourAssignment LabourAssignment[]
  needsMoreLabour  Boolean             @default(false)
  forwardings      JobRoleForwarding[]
}

model LabourProfile {
  id                   String                     @id @default(uuid())
  name                 String
  profileImage         String?
  age                  Int
  gender               Gender
  nationality          String
  email                String?                    @unique
  phone                String?                    @unique
  passportNumber       String
  passportExpiry       DateTime
  passportVerified     Boolean                    @default(false)
  visaType             String?
  visaExpiry           DateTime?
  visaVerified         Boolean                    @default(false)
  medicalReport        String?
  medicalVerified      Boolean                    @default(false)
  policeClearance      String?
  policeVerified       Boolean                    @default(false)
  contractVerified     Boolean                    @default(false)
  status               LabourProfileStatus        @default(RECEIVED)
  verificationStatus   DocumentVerificationStatus @default(PENDING)
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  documentsSubmittedAt DateTime?
  documentsVerifiedAt  DateTime?

  // Skills and qualifications
  jobRole    String?
  skills     String[]
  experience String?
  education  String?
  languages  String[]

  // Relationships
  requirementId String?
  requirement   Requirement? @relation(fields: [requirementId], references: [id])
  agencyId      String
  agency        Agency       @relation(fields: [agencyId], references: [id])

  currentStage LabourStage          @default(OFFER_LETTER_SIGN)
  stages       LabourStageHistory[]

  // Audit logs
  auditLogs        AuditLog[]
  Document         Document[]
  LabourAssignment LabourAssignment[]

  @@index([agencyId])
  @@index([requirementId])
  @@index([status])
  @@index([verificationStatus])
  @@index([nationality])
  @@index([createdAt])
  @@index([name, status])
  @@index([passportNumber])
}

model LabourAssignment {
  id        String        @id @default(uuid())
  jobRoleId String
  jobRole   JobRole       @relation(fields: [jobRoleId], references: [id])
  agencyId  String
  agency    Agency        @relation(fields: [agencyId], references: [id])
  labourId  String
  labour    LabourProfile @relation(fields: [labourId], references: [id])
  isBackup  Boolean       @default(false)

  // Tracking status at each stage
  agencyStatus RequirementStatus @default(SUBMITTED) // Agency submission status
  adminStatus  RequirementStatus @default(PENDING) // Admin review status
  clientStatus RequirementStatus @default(PENDING) // Client review status

  // Tracking feedback
  adminFeedback  String?
  clientFeedback String?

  signedOfferLetterUrl String? // Path to uploaded signed offer letter PDF
  visaUrl              String? // Path to uploaded visa PDF

  // Travel documents
  travelDate              DateTime? // Travel date for the labour
  flightTicketUrl         String? // Path to uploaded flight ticket
  medicalCertificateUrl   String? // Path to uploaded medical certificate
  policeClearanceUrl      String? // Path to uploaded police clearance
  employmentContractUrl   String? // Path to uploaded employment contract
  additionalDocumentsUrls String[] // Paths to uploaded additional documents

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobRoleId, labourId])
  @@index([agencyId])
  @@index([jobRoleId])
  @@index([labourId])
  @@index([isBackup])
  @@index([clientStatus])
  @@index([adminStatus, clientStatus])
}

model LabourStageHistory {
  id          String        @id @default(uuid())
  labourId    String
  labour      LabourProfile @relation(fields: [labourId], references: [id])
  stage       LabourStage
  status      StageStatus
  notes       String?
  documents   String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  completedAt DateTime?
}

model AuditLog {
  id             String          @id @default(uuid())
  action         AuditAction
  entityType     String          @db.VarChar(50)
  entityId       String
  description    String?
  oldData        Json?
  newData        Json?
  affectedFields String[]
  ipAddress      String?         @db.VarChar(45)
  userAgent      String?
  performedById  String
  performedBy    User            @relation(fields: [performedById], references: [id])
  performedAt    DateTime        @default(now())
  createdAt      DateTime        @default(now())
  Requirement    Requirement[]   @relation("RequirementAudit")
  LabourProfile  LabourProfile[]

  @@index([entityType, entityId])
  @@index([performedById])
  @@index([action])
  @@index([createdAt])
  @@index([entityType, action])
  @@map("audit_logs")
}

model JobRoleForwarding {
  id        String   @id @default(uuid())
  jobRoleId String
  agencyId  String
  quantity  Int
  jobRole   JobRole  @relation(fields: [jobRoleId], references: [id])
  agency    Agency   @relation(fields: [agencyId], references: [id])
  createdAt DateTime @default(now())

  @@unique([jobRoleId, agencyId])
}

model OfferLetterDetails {
  id              String      @id @default(uuid())
  requirementId   String      @unique
  requirement     Requirement @relation(fields: [requirementId], references: [id])
  workingHours    String?
  workingDays     String?
  leaveSalary     String?
  endOfService    String?
  probationPeriod String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Notification {
  id          String           @id @default(uuid())
  type        NotificationType
  title       String
  message     String
  recipientId String
  recipient   User             @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  senderId    String?
  sender      User?            @relation("UserSentNotifications", fields: [senderId], references: [id], onDelete: SetNull)

  // Related entities
  entityType String? @db.VarChar(50) // e.g., "Requirement", "LabourProfile", "Assignment"
  entityId   String? // ID of the related entity

  // Notification metadata
  isRead     Boolean              @default(false)
  isArchived Boolean              @default(false)
  priority   NotificationPriority @default(NORMAL)

  // Action data
  actionUrl  String? // URL to navigate to when notification is clicked
  actionText String? // Text for action button

  // Timestamps
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  archivedAt DateTime?

  @@index([recipientId])
  @@index([senderId])
  @@index([type])
  @@index([isRead])
  @@index([isArchived])
  @@index([createdAt])
  @@index([entityType, entityId])
  @@index([recipientId, isRead])
  @@index([recipientId, isArchived])
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
