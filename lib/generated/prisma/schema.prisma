generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  RECRUITMENT_ADMIN
  CLIENT_ADMIN
  RECRUITMENT_AGENCY
}

enum AccountStatus {
  PENDING_REVIEW
  VERIFIED
  REJECTED
  NOT_VERIFIED
  SUSPENDED
}

enum RequirementStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  FULFILLED
  CLOSED
}

enum LabourStatus {
  RECEIVED
  UNDER_REVIEW
  APPROVED
  REJECTED
  SHORTLISTED
  DEPLOYED
}

enum DocumentType {
  LICENSE
  INSURANCE
  ID_PROOF
  ADDRESS_PROOF
  OTHER
}

enum CompanySector {
  IT
  REAL_ESTATE
  HEALTHCARE
  FINANCE
  MANUFACTURING
  RETAIL
  CONSTRUCTION
  EDUCATION
  OTHER
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum ContractDuration {
  ONE_YEAR
  TWO_YEARS
  UNLIMITED
}

enum TicketDetails {
  ONE_YEAR
  TWO_YEARS
}

enum PreviousExperience {
  FRESH
  GCC_EXPERIENCE
  LOCAL_EXPERIENCE
  ANY
}

enum AuditAction {
  COMPANY_VERIFIED
  COMPANY_REJECTED
  COMPANY_SUSPENDED
  COMPANY_UPDATED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  ACCOUNT_DELETION_REQUESTED
  ACCOUNT_DELETED
  ACCOUNT_RECOVERED
  DRAFT_CREATED
  REQUIREMENT_CREATED
  REQUIREMENT_UPDATED
  REQUIREMENT_DELETED
}

enum DeletionType {
  SCHEDULED
  IMMEDIATE
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  role          UserRole
  status        AccountStatus @default(NOT_VERIFIED)
  resetRequired Boolean       @default(true)
  lastLogin     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  deleteAt            DateTime?     @map("delete_at")
  deletionType        DeletionType?
  deletionRequestedBy String?

  // Profile relations
  client Client?
  agency Agency?
  admin  Admin?

  // Audit
  createdBy           User?                 @relation("CreatedUsers", fields: [createdById], references: [id])
  createdById         String?
  createdUsers        User[]                @relation("CreatedUsers")
  auditLogs           AuditLog[]
  LabourStatusLog     LabourStatusLog[]
  ClientDocument      ClientDocument[]
  AgencyDocument      AgencyDocument[]
  RequirementDocument RequirementDocument[]
  Notification        Notification[]

  @@index([email, status])
}

model Client {
  id              String           @id @default(uuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  companyName     String
  contactPerson   String?
  registrationNo  String?
  companySector   CompanySector?
  companySize     CompanySize?
  website         String?
  designation     String?
  phone           String?
  address         String
  altContact      String?
  businessLicense String?
  image           String?
  requirements    Requirement[]
  documents       ClientDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agency {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Agency Information
  agencyName     String
  registrationNo String?  @unique
  licenseNumber  String
  licenseExpiry  DateTime
  country        String
  regions        String[]

  // Contact Information
  contactPerson String
  phone         String
  email         String?
  website       String?

  // Relations
  documents      AgencyDocument[]
  labourProfiles LabourProfile[]
  requirements   Requirement[]    @relation("AgencyRequirements")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([licenseNumber, registrationNo])
}

model Admin {
  id             String  @id @default(uuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
  name           String
  department     String?
  canCreateUsers Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobRole {
  id            String      @id @default(uuid())
  title         String
  quantity      Int
  nationality   String
  salary        String
  requirement   Requirement @relation(fields: [requirementId], references: [id])
  requirementId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Requirement {
  id                   String              @id @default(uuid())
  projectLocation      String?
  startDate            DateTime?
  contractDuration     ContractDuration?
  previousExperience   PreviousExperience?
  ticketDetails        TicketDetails?
  totalExperienceYears Int?
  preferredAge         Int?
  specialNotes         String?
  status               RequirementStatus   @default(DRAFT)

  // Relationships
  jobRoles       JobRole[]
  languages      String[]
  clientId       String
  client         Client                @relation(fields: [clientId], references: [id])
  assignedTo     Agency?               @relation("AgencyRequirements", fields: [assignedToId], references: [id])
  assignedToId   String?
  labourProfiles LabourProfile[]
  procedures     Procedure[]
  documents      RequirementDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LabourProfile {
  id              String       @id @default(uuid())
  name            String
  age             Int
  gender          String
  nationality     String
  skills          String[]
  experienceYears Int
  education       String?
  language        String[]
  status          LabourStatus @default(RECEIVED)
  cvUrl           String
  passportCopy    String?
  otherDocs       String[]

  // Relationships
  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id])
  agencyId      String
  agency        Agency      @relation(fields: [agencyId], references: [id])

  statusLogs LabourStatusLog[]
  procedures Procedure[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Procedure {
  id            String    @id @default(uuid())
  name          String
  description   String
  status        String    @default("PENDING")
  dueDate       DateTime?
  completedDate DateTime?
  comments      String?

  // Relationships
  requirementId   String?
  requirement     Requirement?   @relation(fields: [requirementId], references: [id])
  labourProfileId String?
  labourProfile   LabourProfile? @relation(fields: [labourProfileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LabourStatusLog {
  id       String       @id @default(uuid())
  status   LabourStatus
  comments String?

  // Relationships
  labourProfileId String
  labourProfile   LabourProfile @relation(fields: [labourProfileId], references: [id])
  changedById     String
  changedBy       User          @relation(fields: [changedById], references: [id])

  createdAt DateTime @default(now())
}

model ClientDocument {
  id       String       @id @default(uuid())
  type     DocumentType
  url      String
  verified Boolean      @default(false)
  comments String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  verifiedById String?
  verifiedBy   User?   @relation(fields: [verifiedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyDocument {
  id       String       @id @default(uuid())
  type     DocumentType
  url      String
  verified Boolean      @default(false)
  comments String?

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id])

  verifiedById String?
  verifiedBy   User?   @relation(fields: [verifiedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequirementDocument {
  id          String       @id @default(uuid())
  type        DocumentType
  url         String
  description String?

  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id])

  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  createdAt DateTime @default(now())
}

model AuditLog {
  id             String      @id @default(uuid())
  action         AuditAction
  entityType     String
  entityId       String
  description    String?
  oldData        Json?
  newData        Json?
  affectedFields String[]
  ipAddress      String?
  userAgent      String?

  performedBy   User     @relation(fields: [performedById], references: [id])
  performedAt   DateTime @default(now())
  performedById String

  createdAt DateTime @default(now())

  @@index([entityType, entityId])
  @@index([performedById])
  @@index([createdAt])
}

model Notification {
  id        String  @id @default(uuid())
  title     String
  message   String
  type      String
  read      Boolean @default(false)
  actionUrl String?
  metadata  Json?

  recipient   User   @relation(fields: [recipientId], references: [id])
  recipientId String

  createdAt DateTime  @default(now())
  readAt    DateTime?

  @@index([recipientId])
  @@index([createdAt])
  @@index([type])
}
