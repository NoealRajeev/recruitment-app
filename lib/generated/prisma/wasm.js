
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  tempPassword: 'tempPassword',
  phone: 'phone',
  altContact: 'altContact',
  profilePicture: 'profilePicture',
  role: 'role',
  status: 'status',
  resetRequired: 'resetRequired',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleteAt: 'deleteAt',
  deletionType: 'deletionType',
  deletionReason: 'deletionReason',
  deletionRequestedBy: 'deletionRequestedBy',
  createdById: 'createdById'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  registrationNo: 'registrationNo',
  companySector: 'companySector',
  companySize: 'companySize',
  website: 'website',
  address: 'address',
  city: 'city',
  country: 'country',
  postalCode: 'postalCode',
  designation: 'designation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgencyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agencyName: 'agencyName',
  registrationNo: 'registrationNo',
  licenseNumber: 'licenseNumber',
  licenseExpiry: 'licenseExpiry',
  country: 'country',
  website: 'website',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  department: 'department',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  type: 'type',
  url: 'url',
  labourProfileId: 'labourProfileId',
  status: 'status',
  category: 'category',
  requirementId: 'requirementId',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.DocumentRequirementScalarFieldEnum = {
  id: 'id',
  role: 'role',
  documentType: 'documentType',
  category: 'category',
  createdAt: 'createdAt'
};

exports.Prisma.RequirementScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobRoleScalarFieldEnum = {
  id: 'id',
  requirementId: 'requirementId',
  title: 'title',
  quantity: 'quantity',
  nationality: 'nationality',
  startDate: 'startDate',
  contractDuration: 'contractDuration',
  salaryCurrency: 'salaryCurrency',
  basicSalary: 'basicSalary',
  foodAllowance: 'foodAllowance',
  foodProvidedByCompany: 'foodProvidedByCompany',
  housingAllowance: 'housingAllowance',
  housingProvidedByCompany: 'housingProvidedByCompany',
  transportationAllowance: 'transportationAllowance',
  transportationProvidedByCompany: 'transportationProvidedByCompany',
  healthInsurance: 'healthInsurance',
  mobileAllowance: 'mobileAllowance',
  mobileProvidedByCompany: 'mobileProvidedByCompany',
  natureOfWorkAllowance: 'natureOfWorkAllowance',
  otherAllowance: 'otherAllowance',
  ticketFrequency: 'ticketFrequency',
  workLocations: 'workLocations',
  previousExperience: 'previousExperience',
  totalExperienceYears: 'totalExperienceYears',
  preferredAge: 'preferredAge',
  languageRequirements: 'languageRequirements',
  specialRequirements: 'specialRequirements',
  assignedAgencyId: 'assignedAgencyId',
  agencyStatus: 'agencyStatus',
  adminStatus: 'adminStatus',
  needsMoreLabour: 'needsMoreLabour'
};

exports.Prisma.LabourProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  profileImage: 'profileImage',
  age: 'age',
  gender: 'gender',
  nationality: 'nationality',
  email: 'email',
  phone: 'phone',
  passportNumber: 'passportNumber',
  passportExpiry: 'passportExpiry',
  passportVerified: 'passportVerified',
  visaType: 'visaType',
  visaExpiry: 'visaExpiry',
  visaVerified: 'visaVerified',
  medicalReport: 'medicalReport',
  medicalVerified: 'medicalVerified',
  policeClearance: 'policeClearance',
  policeVerified: 'policeVerified',
  contractVerified: 'contractVerified',
  status: 'status',
  verificationStatus: 'verificationStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  documentsSubmittedAt: 'documentsSubmittedAt',
  documentsVerifiedAt: 'documentsVerifiedAt',
  jobRole: 'jobRole',
  skills: 'skills',
  experience: 'experience',
  education: 'education',
  languages: 'languages',
  requirementId: 'requirementId',
  agencyId: 'agencyId',
  currentStage: 'currentStage'
};

exports.Prisma.LabourAssignmentScalarFieldEnum = {
  id: 'id',
  jobRoleId: 'jobRoleId',
  agencyId: 'agencyId',
  labourId: 'labourId',
  isBackup: 'isBackup',
  agencyStatus: 'agencyStatus',
  adminStatus: 'adminStatus',
  clientStatus: 'clientStatus',
  adminFeedback: 'adminFeedback',
  clientFeedback: 'clientFeedback',
  signedOfferLetterUrl: 'signedOfferLetterUrl',
  visaUrl: 'visaUrl',
  travelDate: 'travelDate',
  flightTicketUrl: 'flightTicketUrl',
  medicalCertificateUrl: 'medicalCertificateUrl',
  policeClearanceUrl: 'policeClearanceUrl',
  employmentContractUrl: 'employmentContractUrl',
  additionalDocumentsUrls: 'additionalDocumentsUrls',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabourStageHistoryScalarFieldEnum = {
  id: 'id',
  labourId: 'labourId',
  stage: 'stage',
  status: 'status',
  notes: 'notes',
  documents: 'documents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  description: 'description',
  oldData: 'oldData',
  newData: 'newData',
  affectedFields: 'affectedFields',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  performedById: 'performedById',
  performedAt: 'performedAt',
  createdAt: 'createdAt'
};

exports.Prisma.JobRoleForwardingScalarFieldEnum = {
  id: 'id',
  jobRoleId: 'jobRoleId',
  agencyId: 'agencyId',
  quantity: 'quantity',
  createdAt: 'createdAt'
};

exports.Prisma.OfferLetterDetailsScalarFieldEnum = {
  id: 'id',
  requirementId: 'requirementId',
  workingHours: 'workingHours',
  workingDays: 'workingDays',
  leaveSalary: 'leaveSalary',
  endOfService: 'endOfService',
  probationPeriod: 'probationPeriod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  recipientId: 'recipientId',
  senderId: 'senderId',
  entityType: 'entityType',
  entityId: 'entityId',
  isRead: 'isRead',
  isArchived: 'isArchived',
  priority: 'priority',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  createdAt: 'createdAt',
  readAt: 'readAt',
  archivedAt: 'archivedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  RECRUITMENT_ADMIN: 'RECRUITMENT_ADMIN',
  CLIENT_ADMIN: 'CLIENT_ADMIN',
  RECRUITMENT_AGENCY: 'RECRUITMENT_AGENCY'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  SUBMITTED: 'SUBMITTED',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED',
  NOT_VERIFIED: 'NOT_VERIFIED',
  SUSPENDED: 'SUSPENDED'
};

exports.DeletionType = exports.$Enums.DeletionType = {
  SCHEDULED: 'SCHEDULED',
  IMMEDIATE: 'IMMEDIATE'
};

exports.CompanySector = exports.$Enums.CompanySector = {
  IT: 'IT',
  REAL_ESTATE: 'REAL_ESTATE',
  HEALTHCARE: 'HEALTHCARE',
  FINANCE: 'FINANCE',
  MANUFACTURING: 'MANUFACTURING',
  RETAIL: 'RETAIL',
  CONSTRUCTION: 'CONSTRUCTION',
  EDUCATION: 'EDUCATION',
  HOSPITALITY: 'HOSPITALITY',
  OIL_GAS: 'OIL_GAS',
  TRANSPORTATION: 'TRANSPORTATION',
  OTHER: 'OTHER'
};

exports.CompanySize = exports.$Enums.CompanySize = {
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE',
  ENTERPRISE: 'ENTERPRISE'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  PROFILE_IMAGE: 'PROFILE_IMAGE',
  LICENSE: 'LICENSE',
  INSURANCE: 'INSURANCE',
  ID_PROOF: 'ID_PROOF',
  ADDRESS_PROOF: 'ADDRESS_PROOF',
  COMPANY_REGISTRATION: 'COMPANY_REGISTRATION',
  PASSPORT: 'PASSPORT',
  CV: 'CV',
  OTHER: 'OTHER'
};

exports.DocumentCategory = exports.$Enums.DocumentCategory = {
  IMPORTANT: 'IMPORTANT',
  SUPPORTING: 'SUPPORTING'
};

exports.RequirementStatus = exports.$Enums.RequirementStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  PARTIALLY_SUBMITTED: 'PARTIALLY_SUBMITTED',
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  FORWARDED: 'FORWARDED',
  ACCEPTED: 'ACCEPTED',
  PARTIALLY_ACCEPTED: 'PARTIALLY_ACCEPTED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED',
  CLIENT_REVIEW: 'CLIENT_REVIEW',
  SUBMITTED_TO_CLIENT: 'SUBMITTED_TO_CLIENT',
  NEEDS_REVISION: 'NEEDS_REVISION',
  AGENCY_REJECTED: 'AGENCY_REJECTED'
};

exports.ContractDuration = exports.$Enums.ContractDuration = {
  ONE_MONTH: 'ONE_MONTH',
  THREE_MONTHS: 'THREE_MONTHS',
  SIX_MONTHS: 'SIX_MONTHS',
  ONE_YEAR: 'ONE_YEAR',
  TWO_YEARS: 'TWO_YEARS',
  THREE_YEARS: 'THREE_YEARS',
  FIVE_PLUS_YEARS: 'FIVE_PLUS_YEARS'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.LabourProfileStatus = exports.$Enums.LabourProfileStatus = {
  RECEIVED: 'RECEIVED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SHORTLISTED: 'SHORTLISTED',
  DEPLOYED: 'DEPLOYED'
};

exports.DocumentVerificationStatus = exports.$Enums.DocumentVerificationStatus = {
  PENDING: 'PENDING',
  PARTIALLY_VERIFIED: 'PARTIALLY_VERIFIED',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.LabourStage = exports.$Enums.LabourStage = {
  OFFER_LETTER_SIGN: 'OFFER_LETTER_SIGN',
  VISA_APPLYING: 'VISA_APPLYING',
  QVC_PAYMENT: 'QVC_PAYMENT',
  CONTRACT_SIGN: 'CONTRACT_SIGN',
  MEDICAL_STATUS: 'MEDICAL_STATUS',
  FINGERPRINT: 'FINGERPRINT',
  VISA_PRINTING: 'VISA_PRINTING',
  READY_TO_TRAVEL: 'READY_TO_TRAVEL',
  TRAVEL_CONFIRMATION: 'TRAVEL_CONFIRMATION',
  ARRIVAL_CONFIRMATION: 'ARRIVAL_CONFIRMATION',
  DEPLOYED: 'DEPLOYED'
};

exports.StageStatus = exports.$Enums.StageStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REJECTED: 'REJECTED',
  PAID: 'PAID',
  SIGNED: 'SIGNED',
  REFUSED: 'REFUSED',
  FIT: 'FIT',
  UNFIT: 'UNFIT',
  PASSED: 'PASSED',
  FILLED: 'FILLED',
  TRAVELED: 'TRAVELED',
  RESCHEDULED: 'RESCHEDULED',
  CANCELED: 'CANCELED',
  ARRIVED: 'ARRIVED',
  NOT_ARRIVED: 'NOT_ARRIVED',
  VISA_PRINTED: 'VISA_PRINTED'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  USER_CREATE: 'USER_CREATE',
  USER_READ: 'USER_READ',
  USER_UPDATE: 'USER_UPDATE',
  USER_DELETE: 'USER_DELETE',
  CLIENT_CREATE: 'CLIENT_CREATE',
  CLIENT_READ: 'CLIENT_READ',
  CLIENT_UPDATE: 'CLIENT_UPDATE',
  CLIENT_DELETE: 'CLIENT_DELETE',
  AGENCY_CREATE: 'AGENCY_CREATE',
  AGENCY_READ: 'AGENCY_READ',
  AGENCY_UPDATE: 'AGENCY_UPDATE',
  AGENCY_DELETE: 'AGENCY_DELETE',
  REQUIREMENT_CREATE: 'REQUIREMENT_CREATE',
  REQUIREMENT_READ: 'REQUIREMENT_READ',
  REQUIREMENT_UPDATE: 'REQUIREMENT_UPDATE',
  REQUIREMENT_DELETE: 'REQUIREMENT_DELETE',
  LABOUR_PROFILE_CREATE: 'LABOUR_PROFILE_CREATE',
  LABOUR_PROFILE_READ: 'LABOUR_PROFILE_READ',
  LABOUR_PROFILE_UPDATE: 'LABOUR_PROFILE_UPDATE',
  LABOUR_PROFILE_DELETE: 'LABOUR_PROFILE_DELETE',
  LABOUR_PROFILE_DOCUMENT_UPLOAD: 'LABOUR_PROFILE_DOCUMENT_UPLOAD',
  LABOUR_PROFILE_STATUS_CHANGE: 'LABOUR_PROFILE_STATUS_CHANGE',
  LABOUR_PROFILE_VERIFICATION_CHANGE: 'LABOUR_PROFILE_VERIFICATION_CHANGE',
  DOCUMENT_CREATE: 'DOCUMENT_CREATE',
  DOCUMENT_READ: 'DOCUMENT_READ',
  DOCUMENT_UPDATE: 'DOCUMENT_UPDATE',
  DOCUMENT_DELETE: 'DOCUMENT_DELETE',
  OTP_CREATE: 'OTP_CREATE',
  OTP_READ: 'OTP_READ',
  OTP_UPDATE: 'OTP_UPDATE',
  OTP_DELETE: 'OTP_DELETE',
  NOTIFICATION_CREATE: 'NOTIFICATION_CREATE',
  NOTIFICATION_READ: 'NOTIFICATION_READ',
  NOTIFICATION_UPDATE: 'NOTIFICATION_UPDATE',
  NOTIFICATION_DELETE: 'NOTIFICATION_DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  ACCOUNT_RECOVERY: 'ACCOUNT_RECOVERY'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  USER_REGISTERED: 'USER_REGISTERED',
  USER_VERIFIED: 'USER_VERIFIED',
  USER_SUSPENDED: 'USER_SUSPENDED',
  USER_DELETED: 'USER_DELETED',
  PASSWORD_CHANGED: 'PASSWORD_CHANGED',
  ACCOUNT_RECOVERY: 'ACCOUNT_RECOVERY',
  REQUIREMENT_CREATED: 'REQUIREMENT_CREATED',
  REQUIREMENT_UPDATED: 'REQUIREMENT_UPDATED',
  REQUIREMENT_STATUS_CHANGED: 'REQUIREMENT_STATUS_CHANGED',
  REQUIREMENT_FORWARDED_TO_AGENCY: 'REQUIREMENT_FORWARDED_TO_AGENCY',
  REQUIREMENT_ACCEPTED: 'REQUIREMENT_ACCEPTED',
  REQUIREMENT_REJECTED: 'REQUIREMENT_REJECTED',
  REQUIREMENT_NEEDS_REVISION: 'REQUIREMENT_NEEDS_REVISION',
  LABOUR_PROFILE_CREATED: 'LABOUR_PROFILE_CREATED',
  LABOUR_PROFILE_STATUS_CHANGED: 'LABOUR_PROFILE_STATUS_CHANGED',
  LABOUR_PROFILE_VERIFIED: 'LABOUR_PROFILE_VERIFIED',
  LABOUR_PROFILE_DOCUMENT_UPLOADED: 'LABOUR_PROFILE_DOCUMENT_UPLOADED',
  LABOUR_PROFILE_STAGE_UPDATED: 'LABOUR_PROFILE_STAGE_UPDATED',
  ASSIGNMENT_CREATED: 'ASSIGNMENT_CREATED',
  ASSIGNMENT_STATUS_CHANGED: 'ASSIGNMENT_STATUS_CHANGED',
  ASSIGNMENT_FEEDBACK_RECEIVED: 'ASSIGNMENT_FEEDBACK_RECEIVED',
  DOCUMENT_UPLOADED: 'DOCUMENT_UPLOADED',
  DOCUMENT_VERIFIED: 'DOCUMENT_VERIFIED',
  DOCUMENT_REJECTED: 'DOCUMENT_REJECTED',
  OFFER_LETTER_GENERATED: 'OFFER_LETTER_GENERATED',
  OFFER_LETTER_SIGNED: 'OFFER_LETTER_SIGNED',
  VISA_UPLOADED: 'VISA_UPLOADED',
  TRAVEL_DOCUMENTS_UPLOADED: 'TRAVEL_DOCUMENTS_UPLOADED',
  STAGE_COMPLETED: 'STAGE_COMPLETED',
  STAGE_FAILED: 'STAGE_FAILED',
  STAGE_PENDING_ACTION: 'STAGE_PENDING_ACTION',
  TRAVEL_CONFIRMED: 'TRAVEL_CONFIRMED',
  ARRIVAL_CONFIRMED: 'ARRIVAL_CONFIRMED',
  LABOUR_DEPLOYED: 'LABOUR_DEPLOYED',
  AGENCY_ASSIGNED: 'AGENCY_ASSIGNED',
  AGENCY_RESPONSE_RECEIVED: 'AGENCY_RESPONSE_RECEIVED',
  AGENCY_STATUS_CHANGED: 'AGENCY_STATUS_CHANGED',
  SYSTEM_MAINTENANCE: 'SYSTEM_MAINTENANCE',
  SYSTEM_UPDATE: 'SYSTEM_UPDATE',
  SECURITY_ALERT: 'SECURITY_ALERT',
  WELCOME_MESSAGE: 'WELCOME_MESSAGE'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Client: 'Client',
  Agency: 'Agency',
  Admin: 'Admin',
  Document: 'Document',
  DocumentRequirement: 'DocumentRequirement',
  Requirement: 'Requirement',
  JobRole: 'JobRole',
  LabourProfile: 'LabourProfile',
  LabourAssignment: 'LabourAssignment',
  LabourStageHistory: 'LabourStageHistory',
  AuditLog: 'AuditLog',
  JobRoleForwarding: 'JobRoleForwarding',
  OfferLetterDetails: 'OfferLetterDetails',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
