generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========
enum UserRole {
  RECRUITMENT_ADMIN
  CLIENT_ADMIN
  RECRUITMENT_AGENCY
}

enum AccountStatus {
  PENDING_REVIEW
  SUBMITTED
  PENDING_SUBMISSION
  VERIFIED
  REJECTED
  NOT_VERIFIED
  SUSPENDED
}

enum RequirementStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  FULFILLED
  CLOSED
}

enum LabourProfileStatus {
  RECEIVED
  UNDER_REVIEW
  APPROVED
  REJECTED
  SHORTLISTED
  DEPLOYED
  QVC_PROCESS
  MEDICAL_PROCESS
  VISA_PROCESS
  READY_FOR_DEPLOYMENT
}

enum DocumentType {
  LICENSE
  INSURANCE
  ID_PROOF
  ADDRESS_PROOF
  COMPANY_REGISTRATION
  PASSPORT
  CV
  OTHER
}

enum CompanySector {
  IT
  REAL_ESTATE
  HEALTHCARE
  FINANCE
  MANUFACTURING
  RETAIL
  CONSTRUCTION
  EDUCATION
  HOSPITALITY
  OIL_GAS
  TRANSPORTATION
  OTHER
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum ContractDuration {
  ONE_YEAR
  TWO_YEARS
  THREE_YEARS
  UNLIMITED
}

enum TicketType {
  ONE_WAY
  TWO_WAY
  NONE
}

enum ExperienceLevel {
  FRESH
  ONE_YEAR
  TWO_YEARS
  THREE_YEARS
  FOUR_YEARS
  FIVE_PLUS_YEARS
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AuditAction {
  // User related
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_STATUS_CHANGED
  USER_PASSWORD_RESET
  
  // Client related
  CLIENT_CREATED
  CLIENT_UPDATED
  CLIENT_VERIFIED
  CLIENT_REJECTED
  
  // Agency related
  AGENCY_CREATED
  AGENCY_UPDATED
  AGENCY_VERIFIED
  AGENCY_REJECTED
  AGENCY_DELETION_REQUESTED
  
  // Requirement related
  REQUIREMENT_CREATED
  REQUIREMENT_UPDATED
  REQUIREMENT_DELETE
  REQUIREMENT_REJECTED
  REQUIREMENT_STATUS_CHANGED
  REQUIREMENT_ASSIGNED
  DRAFT_CREATED
  DRAFT_UPDATED
  
  // Labour related
  LABOUR_PROFILE_CREATED
  LABOUR_PROFILE_UPDATED
  LABOUR_STATUS_CHANGED
  
  // Document related
  DOCUMENT_UPLOADED
  DOCUMENT_VERIFIED
  DOCUMENT_REJECTED
  
  // System
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  ACCOUNT_RECOVERY
}

enum ProcedureStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum NotificationType {
  SYSTEM
  REQUIREMENT
  LABOUR
  DOCUMENT
  ACCOUNT
  GENERAL
}

enum DeletionType {
  SCHEDULED
  IMMEDIATE
}

enum DocumentVerificationStatus {
  PENDING
  PARTIALLY_VERIFIED
  VERIFIED
  REJECTED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

// ========== MODELS ==========
model User {
  id              String          @id @default(uuid())
  name            String
  email           String          @unique @db.VarChar(255)
  password        String
  phone           String?         @unique @db.VarChar(20)
  altContact      String?         @db.VarChar(20)
  profilePicture  String?
  role            UserRole
  status          AccountStatus   @default(PENDING_REVIEW)
  resetRequired   Boolean         @default(true)
  lastLogin       DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Soft delete fields
  deleteAt        DateTime?
  deletionType    DeletionType?
  deletionReason  String?
  deletionRequestedBy String?

  // Profile relations (mutually exclusive)
  clientProfile   Client?
  agencyProfile   Agency?
  adminProfile    Admin?

  // Relations
  createdBy       User?           @relation("UserCreation", fields: [createdById], references: [id])
  createdById     String?
  createdUsers    User[]          @relation("UserCreation")
  auditLogs       AuditLog[]
  notifications   Notification[]
  statusLogs      LabourStatusLog[]
  clientDocuments ClientDocument[]
  agencyDocuments AgencyDocument[]
  
  // Indexes
  @@index([email])
  @@index([status])
  @@index([role])
  @@index([createdAt])
  @@index([email, status])
  
  @@map("users")
  DocumentVerification DocumentVerification[]
}

model Client {
  id              String          @id @default(uuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id])
  
  // Company Info
  companyName     String          @db.VarChar(255)
  registrationNo  String?         @unique @db.VarChar(50)
  companySector   CompanySector
  companySize     CompanySize
  website         String?         @db.VarChar(255)
  address         String
  city            String          @db.VarChar(100)
  country         String          @db.VarChar(100)
  postalCode      String?         @db.VarChar(20)
  
  // Contact Info
  designation     String          @db.VarChar(100)
  
  // Relations
  requirements    Requirement[]
  documents       ClientDocument[]
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Indexes
  @@index([companyName])
  @@index([registrationNo])
  @@index([companySector])
  
  @@map("clients")
}

model Agency {
  id              String          @id @default(uuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id])
  
  // Agency Info
  agencyName      String          @db.VarChar(255)
  registrationNo  String?         @unique @db.VarChar(50)
  licenseNumber   String          @db.VarChar(50)
  licenseExpiry   DateTime
  country         String          @db.VarChar(100)
  
  // Contact Info
  website         String?         @db.VarChar(255)
  address         String
  city            String          @db.VarChar(100)
  postalCode      String?         @db.VarChar(20)
  
  // Relations
  labourProfiles  LabourProfile[]
  requirements    Requirement[]   @relation("AgencyRequirements")
  documents       AgencyDocument[]
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Indexes
  @@index([agencyName])
  @@index([licenseNumber])
  @@index([registrationNo])
  
  @@map("agencies")
  RequirementAssignment RequirementAssignment[]
}

model Admin {
  id              String          @id @default(uuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id])
  name            String          @db.VarChar(255)
  department      String?         @db.VarChar(100)
  permissions     Json?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("admins")
}

model Requirement {
  id              String          @id @default(uuid())
  specialNotes    String?
  status          RequirementStatus @default(DRAFT)
  
  // Language requirements
  languages       String[]
  
  // Experience
  minExperience   ExperienceLevel?
  maxAge          Int?
  
  // Ticket details
  ticketType      TicketType?
  ticketProvided  Boolean         @default(false)
  
  // Relationships
  clientId        String
  client          Client          @relation(fields: [clientId], references: [id])
  assignedAgency  Agency?         @relation("AgencyRequirements", fields: [assignedAgencyId], references: [id])
  assignedAgencyId String?
  jobRoles        JobRole[]
  procedures      Procedure[]
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  submittedAt     DateTime?
  reviewedAt      DateTime?
  
  // Indexes
  @@index([clientId])
  @@index([status])
  @@index([createdAt])
  @@index([clientId, status])
  @@index([assignedAgencyId, status])
  
  @@map("requirements")
  RequirementAssignment RequirementAssignment[]
}

model JobRole {
  id              String          @id @default(uuid())
  title           String          @db.VarChar(255)
  quantity        Int             @default(1)
  nationality     String          @db.VarChar(100)
  salary          Float?
  salaryCurrency  String          @default("QAR") @db.VarChar(3)
  startDate       DateTime?
  contractDuration ContractDuration?
  
  // Relationships
  requirementId   String
  requirement     Requirement     @relation(fields: [requirementId], references: [id])
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Indexes
  @@index([requirementId])
  @@index([nationality])
  @@index([salary])
  @@index([startDate])
  @@index([contractDuration])
  
  @@map("job_roles")
  RequirementAssignment RequirementAssignment[]
}

model RequirementAssignment {
  id              String          @id @default(uuid())
  requirementId   String
  requirement     Requirement     @relation(fields: [requirementId], references: [id])
  jobRoleId       String
  jobRole         JobRole         @relation(fields: [jobRoleId], references: [id])
  agencyId        String
  agency          Agency          @relation(fields: [agencyId], references: [id])
  quantity        Int
  status          RequirementStatus @default(SUBMITTED)
  metadata        Json?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Indexes
  @@index([requirementId])
  @@index([jobRoleId])
  @@index([agencyId])
  @@index([status])
  
  @@unique([requirementId, jobRoleId, agencyId])
  LabourProfile LabourProfile[]
}

model LabourProfile {
  id              String          @id @default(uuid())
  // Stage 1 - Basic Info (required for creation)
  name            String          @db.VarChar(255)
  age             Int
  gender          Gender
  nationality     String          @db.VarChar(100)
  jobRoleName     String          @db.VarChar(255)
  status          LabourProfileStatus @default(RECEIVED)
  
  // Stage 2 - Additional Info (required when assigned to requirement)
  email           String?         @unique @db.VarChar(255)
  phone           String?         @unique @db.VarChar(20) 
  
  // Documents (Stage 2)
  passportNumber  String?         @db.VarChar(50)
  passportExpiry  DateTime?
  passportCopy    String?
  passportVerified Boolean        @default(false)
  
  visaType        String?         @db.VarChar(50)
  visaExpiry      DateTime?
  visaCopy        String?
  visaVerified    Boolean         @default(false)
  
  medicalReport   String?
  medicalExpiry   DateTime?
  medicalVerified Boolean         @default(false)
  
  policeClearance String?
  policeVerified  Boolean         @default(false)
  
  contractCopy    String?
  contractVerified Boolean        @default(false)
  
  otherDocs       Json?
  
  // Verification Status
  verificationStatus DocumentVerificationStatus @default(PENDING)
  statusReason    String?
  
  // Relationships
  agencyId        String
  agency          Agency          @relation(fields: [agencyId], references: [id])
  requirementAssignmentId String?
  requirementAssignment RequirementAssignment? @relation(fields: [requirementAssignmentId], references: [id])
  statusLogs      LabourStatusLog[]
  procedures      Procedure[]
  documentVerifications DocumentVerification[]

  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  documentsSubmittedAt DateTime?
  documentsVerifiedAt DateTime?
  
  // Indexes
  @@index([agencyId])
  @@index([status])
  @@index([nationality])
  @@index([requirementAssignmentId])
  @@index([verificationStatus])
  
  @@map("labour_profiles")
}

model DocumentVerification {
  id              String          @id @default(uuid())
  documentType    String          // e.g., "PASSPORT", "VISA", etc.
  documentUrl     String
  status          VerificationStatus @default(PENDING)
  comments        String?
  
  // Relationships
  labourProfileId String
  labourProfile   LabourProfile   @relation(fields: [labourProfileId], references: [id])
  verifiedById    String?
  verifiedBy      User?           @relation(fields: [verifiedById], references: [id])
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  verifiedAt      DateTime?
  
  // Indexes
  @@index([labourProfileId])
  @@index([documentType])
  @@index([status])
  
  @@map("document_verifications")
}

model Procedure {
  id              String          @id @default(uuid())
  name            String          @db.VarChar(255)
  description     String
  status          ProcedureStatus @default(PENDING)
  dueDate         DateTime?
  completedDate   DateTime?
  comments        String?
  metadata        Json?
  
  // Relationships
  requirementId   String?
  requirement     Requirement?    @relation(fields: [requirementId], references: [id])
  labourProfileId String?
  labourProfile   LabourProfile?  @relation(fields: [labourProfileId], references: [id])
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Indexes
  @@index([requirementId])
  @@index([labourProfileId])
  @@index([status])
  @@index([dueDate])
  
  @@map("procedures")
}

model LabourStatusLog {
  id              String          @id @default(uuid())
  status          LabourProfileStatus
  comments        String?
  metadata        Json?
  
  // Relationships
  labourProfileId String
  labourProfile   LabourProfile   @relation(fields: [labourProfileId], references: [id])
  changedById     String
  changedBy       User            @relation(fields: [changedById], references: [id])
  
  // Timestamps
  createdAt       DateTime        @default(now())
  
  // Indexes
  @@index([labourProfileId])
  @@index([changedById])
  @@index([createdAt])
  @@index([status, createdAt])
  
  @@map("labour_status_logs")
}

model ClientDocument {
  id              String          @id @default(uuid())
  type            DocumentType
  url             String
  name            String?         @db.VarChar(255)
  description     String?
  verified        Boolean         @default(false)
  comments        String?
  expiryDate      DateTime?
  
  // Relationships
  clientId        String
  client          Client          @relation(fields: [clientId], references: [id])
  verifiedById    String?
  verifiedBy      User?           @relation(fields: [verifiedById], references: [id])
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Indexes
  @@index([clientId])
  @@index([type])
  @@index([verified])
  @@index([expiryDate])
  
  @@map("client_documents")
}

model AgencyDocument {
  id              String          @id @default(uuid())
  type            DocumentType
  url             String
  name            String?         @db.VarChar(255)
  description     String?
  verified        Boolean         @default(false)
  comments        String?
  expiryDate      DateTime?
  
  // Relationships
  agencyId        String
  agency          Agency          @relation(fields: [agencyId], references: [id])
  verifiedById    String?
  verifiedBy      User?           @relation(fields: [verifiedById], references: [id])
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Indexes
  @@index([agencyId])
  @@index([type])
  @@index([verified])
  @@index([expiryDate])
  
  @@map("agency_documents")
}

model AuditLog {
  id              String          @id @default(uuid())
  action          AuditAction
  entityType      String          @db.VarChar(50)
  entityId        String
  description     String?
  oldData         Json?
  newData         Json?
  affectedFields  String[]
  ipAddress       String?         @db.VarChar(45)
  userAgent       String?
  
  // Relationships
  performedBy     User            @relation(fields: [performedById], references: [id])
  performedById   String
  performedAt     DateTime        @default(now())
  
  // Timestamps
  createdAt       DateTime        @default(now())
  
  // Indexes
  @@index([entityType, entityId])
  @@index([performedById])
  @@index([action])
  @@index([createdAt])
  @@index([entityType, action])
  
  @@map("audit_logs")
}

model Notification {
  id              String          @id @default(uuid())
  title           String          @db.VarChar(255)
  message         String
  type            NotificationType
  read            Boolean         @default(false)
  actionUrl       String?
  metadata        Json?
  
  // Relationships
  recipient       User            @relation(fields: [recipientId], references: [id])
  recipientId     String
  
  // Timestamps
  createdAt       DateTime        @default(now())
  readAt          DateTime?
  
  // Indexes
  @@index([recipientId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
  @@index([recipientId, read])
  
  @@map("notifications")
}